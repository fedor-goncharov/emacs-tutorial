Tangle to generate Emacs configuration (init.el) from this Org-file:

#+begin_src text
  M-x org-babel-tangle
#+end_src
* Before any package
  :PROPERTIES:
  :header-args: :noeval :tangle init.el :tangle-mode o444
  :END:
  
  Electric behavior is a standard notion in Emacs - certain keys (e.g., <Enter>) may behave
  differently, depending on the context. Key <Enter> creates a NewLine where it pressed, but 
  if the line had indentation, electric behavior will also indent the cursor on the new line.
  #+begin_src emacs-lisp
    (electric-indent-mode +1)
  #+end_src

* Straight
  :PROPERTIES:
  :header-args: :noeval :tangle init.el :tangle-mode o444
  :END:

  [[https://github.com/radian-software/straight.el][Package manager]] providing access to most packages in Emacs ecosystem.

  ~straight~ identify changed files in handled repositories in order to rebuild
  them, this setting (see [[https://github.com/radian-software/straight.el#customizing-when-packages-are-built][doc]]) limits this checking:

  #+begin_src emacs-lisp
    (setq straight-check-for-modifications (quote (find-when-checking)))
  #+end_src


  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 6))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src

  Install an updated version of [[https://orgmode.org/][Org-mode]] (Emacs comes with a built-in version):

  #+begin_src emacs-lisp
    (straight-use-package 'org)
    (straight-use-package 'org-contrib)
  #+end_src

* use-package
  :PROPERTIES:
  :header-args: :noeval :tangle init.el :tangle-mode o444
  :END:

  [[https://github.com/jwiegley/use-package][use-package]] is a set of handful macros to keep configuration as modular as
  possible, one may find a lot of configuration out there using this package as
  a base:

  #+begin_src emacs-lisp
    (straight-use-package 'use-package)
  #+end_src

  Package must be loaded before usage:

  #+begin_src emacs-lisp
    (require 'use-package)
  #+end_src

* Magit
  :PROPERTIES:
  :header-args: :noeval :tangle init.el :tangle-mode o444
  :END:

  A porcelain interface to Git

  #+begin_src emacs-lisp
    (straight-use-package 'magit)
  #+end_src

* Vertico
  :PROPERTIES:
  :header-args: :noeval :tangle init.el :tangle-mode o444
  :END:

  [[https://github.com/minad/vertico][Vertico]] is an user interface for completion in mini-buffer, it's a quite
  recent package but it tries to be as compliant as possible with built-in Emacs
  completion system:

  #+begin_src emacs-lisp
    (straight-use-package 'vertico)
  #+end_src

  Minimal configuration:

  #+begin_src emacs-lisp
    (use-package vertico
      :init
      (defun crm-indicator (args)
        (cons (concat "[CRM] " (car args)) (cdr args)))
      ;;
      (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
      (setq minibuffer-prompt-properties
            '(read-only t cursor-intangible t face minibuffer-prompt))
      (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
      (setq vertico-cycle t
            enable-recursive-minibuffers t)
      (vertico-mode +1))
  #+end_src

  Check its usage with ~M-x~, this configuration is rather minimal but can be
  enhanced with other packages such as [[https://github.com/minad/marginalia][Marginalia]] (get annotations about
  completions) and [[https://github.com/oantolin/orderless][Orderless]] (fuzzy, regexp selection).

* Marginalia
  :PROPERTIES:
  :header-args: :noeval :tangle init.el :tangle-mode o444
  :END:

  [[https://github.com/minad/marginalia][Marginalia]] adds annotations in mini-buffer. Useful for commands through ~M-x~
  and file/buffer choosing.

  #+begin_src emacs-lisp
    (straight-use-package 'marginalia)
  #+end_src

  No fancy configuration, keybinding in mini-buffer's map toggles annotations
  (if too verbose...):

  #+begin_src emacs-lisp
    (use-package marginalia
      :bind
      (:map minibuffer-local-map ("C-M-a" . marginalia-cycle))
      :init
      (marginalia-mode +1))
  #+end_src

* Which key
  :PROPERTIES:
  :header-args: :noeval :tangle init.el :tangle-mode o444
  :END:

  [[https://github.com/justbur/emacs-which-key][Which-key]] is a discoverability minor mode to show key-bindings:

  #+begin_src emacs-lisp
    (straight-use-package 'which-key)
  #+end_src

  Activate mode after Emacs initialisation and use standard configuration:

  #+begin_src emacs-lisp
    (use-package marginalia
      :hook
      (after-init . which-key-mode))
  #+end_src

  If pop-up is too annoying then it may be useful to set the following
  variables:

  - ~which-key-show-early-on-C-h~ and
  - ~which-key-idle-delay~

* Avy
:PROPERTIES:
:header-args: :noeval :tangle init.el :tangle-mode o444
:END:

  [[https://github.com/abo-abo/avy][Avy]] provides commands for fast displacement in a frame.

  #+begin_src emacs-lisp
    (straight-use-package 'avy)
  #+end_src

  Bindings are not standard:

  #+begin_src emacs-lisp
    (use-package avy
      :bind
      ("C-M-," . avy-goto-char-timer)
      ("C-M-." . avy-pop-mark)
      :config
      (setq avy-timeout-seconds 2
            avy-all-windows 'all-frames))
  #+end_src

  Another interesting command to bind would be [[https://github.com/abo-abo/avy#avy-goto-word-1][avy-goto-word-1]].

* Undo-tree
:PROPERTIES:
:header-args: :noeval :tangle init.el :tangle-mode o444
:END:

  [[https://www.dr-qubit.org/undo-tree.html][Undo tree]] is a mode to visualise and navigate undo history as a tree.

  #+begin_src emacs-lisp
    (straight-use-package 'undo-tree)
  #+end_src

  No special configuration required but package loading goes after Emacs
  initialisation:

  #+begin_src emacs-lisp
    (use-package undo-tree
      :hook
      (after-init . global-undo-tree-mode))
  #+end_src

* Theme
  :PROPERTIES:
  :header-args: :noeval :tangle init.el :tangle-mode o444
  :END:

  There are a lot of Emacs themes out there, unfortunately a lot of them don't
  support other packages or they don't have enough contrast. However, as for
  any configuration, this is a matter of taste.

  [[https://github.com/protesilaos/modus-themes][Modus themes]] are highly accessible (~source~ is not the standard one as it has a
  low bandwidth):

  #+begin_src emacs-lisp
    (straight-use-package '(modus-themes :source  emacsmirror-mirror))
  #+end_src

  #+begin_src emacs-lisp
    (use-package modus-themes
      :config
      (load-theme 'modus-vivendi :no-confirm))
  #+end_src
